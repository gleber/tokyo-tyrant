.TH "TCRDB" 3 "2008-09-15" "Man Page" "Tokyo Tyrant"

.SH NAME
tcrdb \- the remote database API

.SH DESCRIPTION
.PP
Remote database is a set of interfaces to use an abstract database of Tokyo Cabinet, mediated by a server of Tokyo Tyrant.
.PP
.PP
To use the remote database API, include `\fBtcrdb.h\fR' and related standard header files.  Usually, write the following description near the front of a source file.
.PP
.RS
.br
\fB#include <tcrdb.h>\fR
.br
\fB#include <stdlib.h>\fR
.br
\fB#include <stdbool.h>\fR
.br
\fB#include <stdint.h>\fR
.RE
.PP
Objects whose type is pointer to `\fBTCRDB\fR' are used to handle remote databases.  a remote database object is created with the function `\fBtcrdbnew\fR' and is deleted with the function `\fBtcrdbdel\fR'.  To avoid memory leak, it is important to delete every object when it is no longer in use.
.PP
Before operations to store or retrieve records, it is necessary to connect the remote database object to the server.  The function `\fBtcrdbopen\fR' is used to open a database connection and the function `\fBtcrdbclose\fR' is used to close the connection.
.PP
The function `tcrdberrmsg' is used in order to get the message string corresponding to an error code.
.PP
.RS
.br
\fBconst char *tcrdberrmsg(int \fIecode\fB);\fR
.RS
`\fIecode\fR' specifies the error code.
.RE
.RS
The return value is the message string of the error code.
.RE
.RE
.PP
The function `tcrdbnew' is used in order to create a remote database object.
.PP
.RS
.br
\fBTCRDB *tcrdbnew(void);\fR
.RS
The return value is the new remote database object.
.RE
.RE
.PP
The function `tcrdbdel' is used in order to delete a remote database object.
.PP
.RS
.br
\fBvoid tcrdbdel(TCRDB *\fIrdb\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RE
.PP
The function `tcrdbecode' is used in order to get the last happened error code of a remote database object.
.PP
.RS
.br
\fBint tcrdbecode(TCRDB *\fIrdb\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
The return value is the last happened error code.
.RE
.RS
The following error code is defined: `TTESUCCESS' for success, `TTEINVALID' for invalid operation, `TTENOHOST' for host not found, `TTEREFUSED' for connection refused, `TTESEND' for send error, `TTERECV' for recv error, `TTEKEEP' for existing record, `TTENOREC' for no record found, `TTEMISC' for miscellaneous error.
.RE
.RE
.PP
The function `tcrdbopen' is used in order to open a remote database.
.PP
.RS
.br
\fBbool tcrdbopen(TCRDB *\fIrdb\fB, const char *\fIhost\fB, int \fIport\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIhost\fR' specifies the name or the address of the server.
.RE
.RS
`\fIport\fR' specifies the port number.  If it is not more than 0, UNIX domain socket is used and the path of the socket file is specified by the host parameter.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbclose' is used in order to close a remote database object.
.PP
.RS
.br
\fBbool tcrdbclose(TCRDB *\fIrdb\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbput' is used in order to store a record into a remote database object.
.PP
.RS
.br
\fBbool tcrdbput(TCRDB *\fIrdb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, const void *\fIvbuf\fB, int \fIvsiz\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIvbuf\fR' specifies the pointer to the region of the value.
.RE
.RS
`\fIvsiz\fR' specifies the size of the region of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, it is overwritten.
.RE
.RE
.PP
The function `tcrdbput2' is used in order to store a string record into a remote object.
.PP
.RS
.br
\fBbool tcrdbput2(TCRDB *\fIrdb\fB, const char *\fIkstr\fB, const char *\fIvstr\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
`\fIvstr\fR' specifies the string of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, it is overwritten.
.RE
.RE
.PP
The function `tcrdbputkeep' is used in order to store a new record into a remote database object.
.PP
.RS
.br
\fBbool tcrdbputkeep(TCRDB *\fIrdb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, const void *\fIvbuf\fB, int \fIvsiz\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIvbuf\fR' specifies the pointer to the region of the value.
.RE
.RS
`\fIvsiz\fR' specifies the size of the region of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, this function has no effect.
.RE
.RE
.PP
The function `tcrdbputkeep2' is used in order to store a new string record into a remote database object.
.PP
.RS
.br
\fBbool tcrdbputkeep2(TCRDB *\fIrdb\fB, const char *\fIkstr\fB, const char *\fIvstr\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
`\fIvstr\fR' specifies the string of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, this function has no effect.
.RE
.RE
.PP
The function `tcrdbputcat' is used in order to concatenate a value at the end of the existing record in a remote database object.
.PP
.RS
.br
\fBbool tcrdbputcat(TCRDB *\fIrdb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, const void *\fIvbuf\fB, int \fIvsiz\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIvbuf\fR' specifies the pointer to the region of the value.
.RE
.RS
`\fIvsiz\fR' specifies the size of the region of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If there is no corresponding record, a new record is created.
.RE
.RE
.PP
The function `tcrdbputcat2' is used in order to concatenate a string value at the end of the existing record in a remote database object.
.PP
.RS
.br
\fBbool tcrdbputcat2(TCRDB *\fIrdb\fB, const char *\fIkstr\fB, const char *\fIvstr\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
`\fIvstr\fR' specifies the string of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If there is no corresponding record, a new record is created.
.RE
.RE
.PP
The function `tcrdbputshl' is used in order to concatenate a value at the end of the existing record and shift it to the left.
.PP
.RS
.br
\fBbool tcrdbputshl(TCRDB *\fIrdb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, const void *\fIvbuf\fB, int \fIvsiz\fB, int \fIwidth\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIvbuf\fR' specifies the pointer to the region of the value.
.RE
.RS
`\fIvsiz\fR' specifies the size of the region of the value.
.RE
.RS
`\fIwidth\fR' specifies the width of the record.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If there is no corresponding record, a new record is created.
.RE
.RE
.PP
The function `tcrdbputshl2' is used in order to concatenate a string value at the end of the existing record and shift it to the left.
.PP
.RS
.br
\fBbool tcrdbputshl2(TCRDB *\fIrdb\fB, const char *\fIkstr\fB, const char *\fIvstr\fB, int \fIwidth\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
`\fIvstr\fR' specifies the string of the value.
.RE
.RS
`\fIwidth\fR' specifies the width of the record.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If there is no corresponding record, a new record is created.
.RE
.RE
.PP
The function `tcrdbputnr' is used in order to store a record into a remote database object without response from the server.
.PP
.RS
.br
\fBbool tcrdbputnr(TCRDB *\fIrdb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, const void *\fIvbuf\fB, int \fIvsiz\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIvbuf\fR' specifies the pointer to the region of the value.
.RE
.RS
`\fIvsiz\fR' specifies the size of the region of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, it is overwritten.
.RE
.RE
.PP
The function `tcrdbputnr2' is used in order to store a string record into a remote object without response from the server.
.PP
.RS
.br
\fBbool tcrdbputnr2(TCRDB *\fIrdb\fB, const char *\fIkstr\fB, const char *\fIvstr\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
`\fIvstr\fR' specifies the string of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, it is overwritten.
.RE
.RE
.PP
The function `tcrdbout' is used in order to remove a record of a remote database object.
.PP
.RS
.br
\fBbool tcrdbout(TCRDB *\fIrdb\fB, const void *\fIkbuf\fB, int \fIksiz\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbout2' is used in order to remove a string record of a remote database object.
.PP
.RS
.br
\fBbool tcrdbout2(TCRDB *\fIrdb\fB, const char *\fIkstr\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbget' is used in order to retrieve a record in a remote database object.
.PP
.RS
.br
\fBvoid *tcrdbget(TCRDB *\fIrdb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, int *\fIsp\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIsp\fR' specifies the pointer to the variable into which the size of the region of the return value is assigned.
.RE
.RS
If successful, the return value is the pointer to the region of the value of the corresponding record.  `NULL' is returned if no record corresponds.
.RE
.RS
Because an additional zero code is appended at the end of the region of the return value, the return value can be treated as a character string.  Because the region of the return value is allocated with the `malloc' call, it should be released with the `free' call when it is no longer in use.
.RE
.RE
.PP
The function `tcrdbget2' is used in order to retrieve a string record in a remote database object.
.PP
.RS
.br
\fBchar *tcrdbget2(TCRDB *\fIrdb\fB, const char *\fIkstr\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
If successful, the return value is the string of the value of the corresponding record.  `NULL' is returned if no record corresponds.
.RE
.RS
Because the region of the return value is allocated with the `malloc' call, it should be released with the `free' call when it is no longer in use.
.RE
.RE
.PP
The function `tcrdbget3' is used in order to retrieve records in a remote database object.
.PP
.RS
.br
\fBbool tcrdbget3(TCRDB *\fIrdb\fB, TCMAP *\fIrecs\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIrecs\fR' specifies a map object containing the retrieval keys.  As a result of this function, keys existing in the database have the corresponding values and keys not existing in the database are removed.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbvsiz' is used in order to get the size of the value of a record in a remote database object.
.PP
.RS
.br
\fBint tcrdbvsiz(TCRDB *\fIrdb\fB, const void *\fIkbuf\fB, int \fIksiz\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
If successful, the return value is the size of the value of the corresponding record, else, it is \-1.
.RE
.RE
.PP
The function `tcrdbvsiz2' is used in order to get the size of the value of a string record in a remote database object.
.PP
.RS
.br
\fBint tcrdbvsiz2(TCRDB *\fIrdb\fB, const char *\fIkstr\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
If successful, the return value is the size of the value of the corresponding record, else, it is \-1.
.RE
.RE
.PP
The function `tcrdbfwmkeys' is used in order to get forward matching keys in a remote database object.
.PP
.RS
.br
\fBTCLIST *tcrdbfwmkeys(TCRDB *\fIrdb\fB, const void *\fIpbuf\fB, int \fIpsiz\fB, int \fImax\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIpbuf\fR' specifies the pointer to the region of the prefix.
.RE
.RS
`\fIpsiz\fR' specifies the size of the region of the prefix.
.RE
.RS
`\fImax\fR' specifies the maximum number of keys to be fetched.  If it is negative, no limit is specified.
.RE
.RS
The return value is a list object of the corresponding keys.  This function does never fail and return an empty list even if no key corresponds.
.RE
.RS
Because the object of the return value is created with the function `tclistnew', it should be deleted with the function `tclistdel' when it is no longer in use.
.RE
.RE
.PP
The function `tcrdbfwmkeys2' is used in order to get forward matching string keys in a remote database object.
.PP
.RS
.br
\fBTCLIST *tcrdbfwmkeys2(TCRDB *\fIrdb\fB, const char *\fIpstr\fB, int \fImax\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIpstr\fR' specifies the string of the prefix.
.RE
.RS
`\fImax\fR' specifies the maximum number of keys to be fetched.  If it is negative, no limit is specified.
.RE
.RS
The return value is a list object of the corresponding keys.  This function does never fail and return an empty list even if no key corresponds.
.RE
.RS
Because the object of the return value is created with the function `tclistnew', it should be deleted with the function `tclistdel' when it is no longer in use.
.RE
.RE
.PP
The function `tcrdbsync' is used in order to synchronize updated contents of a remote database object with the file and the device.
.PP
.RS
.br
\fBbool tcrdbsync(TCRDB *\fIrdb\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbvanish' is used in order to remove all records of a remote database object.
.PP
.RS
.br
\fBbool tcrdbvanish(TCRDB *\fIrdb\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbcopy' is used in order to copy the database file of a remote database object.
.PP
.RS
.br
\fBbool tcrdbcopy(TCRDB *\fIrdb\fB, const char *\fIpath\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIpath\fR' specifies the path of the destination file.  If it begins with `@', the trailing substring is executed as a command line.
.RE
.RS
If successful, the return value is true, else, it is false.  False is returned if the executed command returns non\-zero code.
.RE
.RS
The database file is assured to be kept synchronized and not modified while the copying or executing operation is in progress.  So, this function is useful to create a backup file of the database file.
.RE
.RE
.PP
The function `tcrdbrestore' is used in order to restore the database file of a remote database object from the update log.
.PP
.RS
.br
\fBbool tcrdbrestore(TCRDB *\fIrdb\fB, const char *\fIpath\fB, uint64_t \fIts\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIpath\fR' specifies the path of the update log directory.  If it begins with `+', the trailing substring is treated as the path and consistency checking is omitted.
.RE
.RS
`\fIts\fR' specifies the beginning time stamp in microseconds.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbsetmst' is used in order to set the replication master of a remote database object from the update log.
.PP
.RS
.br
\fBbool tcrdbsetmst(TCRDB *\fIrdb\fB, const char *\fIhost\fB, int \fIport\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIhost\fR' specifies the name or the address of the server.  If it is `NULL', replication of the database is disabled.
.RE
.RS
`\fIport\fR' specifies the port number.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcrdbrnum' is used in order to get the number of records of a remote database object.
.PP
.RS
.br
\fBuint64_t tcrdbrnum(TCRDB *\fIrdb\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
The return value is the number of records or 0 if the object does not connect to any database server.
.RE
.RE
.PP
The function `tcrdbsize' is used in order to get the size of the database of a remote database object.
.PP
.RS
.br
\fBuint64_t tcrdbsize(TCRDB *\fIrdb\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
The return value is the size of the database or 0 if the object does not connect to any database server.
.RE
.RE
.PP
The function `tcrdbstat' is used in order to get the status string of the database of a remote database object.
.PP
.RS
.br
\fBchar *tcrdbstat(TCRDB *\fIrdb\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
The return value is the status message of the database or `NULL' if the object does not connect to any database server.  The message format is TSV.  The first field of each line means the parameter name and the second field means the value.
.RE
.RS
Because the region of the return value is allocated with the `malloc' call, it should be released with the `free' call when it is no longer in use.
.RE
.RE
.PP
The function `tcrdbmisc' is used in order to call a versatile function for miscellaneous operations of a remote database object.
.PP
.RS
.br
\fBTCLIST *tcrdbmisc(TCRDB *\fIrdb\fB, const char *\fIname\fB, int \fIopts\fB, const TCLIST *\fIargs\fB);\fR
.RS
`\fIrdb\fR' specifies the remote database object.
.RE
.RS
`\fIname\fR' specifies the name of the function.
.RE
.RS
`\fIopts\fR' specifies options by bitwise or: `RDBMONOULOG' for omission of the update log.
.RE
.RS
`\fIargs\fR' specifies a list object containing arguments.
.RE
.RS
If successful, the return value is a list object of the result.  `NULL' is returned on failure.
.RE
.RS
All databases support "putlist", "outlist", and "getlist".  "putlist" is to store records.  It receives keys and values one after the other, and returns an empty list.  "outlist" is to remove records.  It receives keys, and returns an empty list.  "getlist" is to retrieve records.  It receives keys, and returns values.  Because the object of the return value is created with the function `tclistnew', it should be deleted with the function `tclistdel' when it is no longer in use.
.RE
.RE

.SH SEE ALSO
.PP
.BR ttserver (1),
.BR tcrtest (1),
.BR tcrmttest (1),
.BR tcrmgr (1),
.BR ttutil (3)
